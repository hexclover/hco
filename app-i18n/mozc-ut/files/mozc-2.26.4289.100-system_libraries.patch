--- /src/gyp/defines.gypi
+++ /src/gyp/defines.gypi
@@ -63,6 +63,15 @@
     # use_libibus represents if ibus library is used or not.
     # This option is only for Linux.
     'use_libibus%': '0',
+
+    # use_libgtest represents if gtest library is used or not.
+    'use_libgtest%': '0',
+
+    # use_libjsoncpp represents if jsoncpp library is used or not.
+    'use_libjsoncpp%': '0',
+
+    # use_libabseilcpp represents if abseilcpp library is used or not.
+    'use_libabseilcpp%': '0',
   },
   'target_defaults': {
     'defines': [
--- /src/net/jsoncpp.gyp
+++ /src/net/jsoncpp.gyp
@@ -31,32 +31,57 @@
   'targets': [
     {
       'target_name': 'jsoncpp',
-      'type': 'static_library',
-      'variables': {
-        'jsoncpp_root': '<(third_party_dir)/jsoncpp',
-        'jsoncpp_srcs': [
-          '<(jsoncpp_root)/src/lib_json/json_reader.cpp',
-          '<(jsoncpp_root)/src/lib_json/json_value.cpp',
-          '<(jsoncpp_root)/src/lib_json/json_writer.cpp',
-        ],
-        'jsoncpp_include_dirs': ['<(jsoncpp_root)/include'],
-        'jsoncpp_additional_macros': ['JSON_USE_EXCEPTION=0'],
-      },
-      'defines': [
-        '<@(jsoncpp_additional_macros)',
+      'conditions': [
+        ['use_libjsoncpp==1', {
+          'type': 'none',
+          'variables': {
+            'jsoncpp_additional_macros': ['JSON_USE_EXCEPTION=0'],
+          },
+          'all_dependent_settings': {
+            'defines': [
+              '<@(jsoncpp_additional_macros)',
+            ],
+            'cflags': [
+              '<!@(pkg-config --cflags jsoncpp)',
+            ],
+            'link_settings': {
+              'libraries': [
+                '<!@(pkg-config --libs-only-l jsoncpp)',
+              ],
+              'ldflags': [
+                '<!@(pkg-config --libs-only-L jsoncpp)',
+              ],
+            }
+          },
+        }, {
+          'type': 'static_library',
+          'variables': {
+            'jsoncpp_root': '<(third_party_dir)/jsoncpp',
+            'jsoncpp_srcs': [
+              '<(jsoncpp_root)/src/lib_json/json_reader.cpp',
+              '<(jsoncpp_root)/src/lib_json/json_value.cpp',
+              '<(jsoncpp_root)/src/lib_json/json_writer.cpp',
+            ],
+            'jsoncpp_include_dirs': ['<(jsoncpp_root)/include'],
+            'jsoncpp_additional_macros': ['JSON_USE_EXCEPTION=0'],
+          },
+          'defines': [
+            '<@(jsoncpp_additional_macros)',
+          ],
+          'sources': [
+            '<@(jsoncpp_srcs)',
+            'jsoncpp.h',
+          ],
+          'include_dirs': [
+            '<@(jsoncpp_include_dirs)',
+          ],
+          'all_dependent_settings': {
+            'defines': [
+              '<@(jsoncpp_additional_macros)',
+            ],
+          },
+        }],
       ],
-      'sources': [
-        '<@(jsoncpp_srcs)',
-        'jsoncpp.h',
-      ],
-      'include_dirs': [
-        '<@(jsoncpp_include_dirs)',
-      ],
-      'all_dependent_settings': {
-        'defines': [
-          '<@(jsoncpp_additional_macros)',
-        ],
-      },
     },
   ],
 }
--- /src/net/jsoncpp.h
+++ /src/net/jsoncpp.h
@@ -35,7 +35,7 @@
 // Mozc basically disables C++ exception.
 #define JSON_USE_EXCEPTION 0
 #endif  // !JSON_USE_EXCEPTION
-#include "third_party/jsoncpp/include/json/json.h"
+#include <json/json.h>
 #define MOZC_JSONCPP_JSON_H_INCLUDED
 #endif  // !MOZC_JSONCPP_JSON_H_INCLUDED
 
--- /src/testing/testing.gyp
+++ /src/testing/testing.gyp
@@ -59,48 +59,6 @@
   'targets': [
     {
       'target_name': 'testing',
-      'type': 'static_library',
-      'variables': {
-        'gtest_defines': [
-          'GTEST_LANG_CXX11=1',
-          'GTEST_HAS_TR1_TUPLE=0',  # disable tr1 tuple in favor of C++11 tuple.
-        ],
-        'gtest_dir': '<(third_party_dir)/gtest/googletest',
-        'gmock_dir': '<(third_party_dir)/gtest/googlemock',
-      },
-      'sources': [
-        '<(gmock_dir)/src/gmock-cardinalities.cc',
-        '<(gmock_dir)/src/gmock-internal-utils.cc',
-        '<(gmock_dir)/src/gmock-matchers.cc',
-        '<(gmock_dir)/src/gmock-spec-builders.cc',
-        '<(gmock_dir)/src/gmock.cc',
-        '<(gtest_dir)/src/gtest-death-test.cc',
-        '<(gtest_dir)/src/gtest-filepath.cc',
-        '<(gtest_dir)/src/gtest-matchers.cc',
-        '<(gtest_dir)/src/gtest-port.cc',
-        '<(gtest_dir)/src/gtest-printers.cc',
-        '<(gtest_dir)/src/gtest-test-part.cc',
-        '<(gtest_dir)/src/gtest-typed-test.cc',
-        '<(gtest_dir)/src/gtest.cc',
-      ],
-      'include_dirs': [
-        '<(gmock_dir)',
-        '<(gmock_dir)/include',
-        '<(gtest_dir)',
-        '<(gtest_dir)/include',
-      ],
-      'defines': [
-        '<@(gtest_defines)',
-      ],
-      'all_dependent_settings': {
-        'defines': [
-          '<@(gtest_defines)',
-        ],
-        'include_dirs': [
-          '<(gmock_dir)/include',
-          '<(gtest_dir)/include',
-        ],
-      },
       'conditions': [
         ['(_toolset=="target" and compiler_target=="clang") or '
          '(_toolset=="host" and compiler_host=="clang")', {
@@ -109,6 +67,67 @@
             '-Wno-unused-private-field',
           ],
         }],
+        ['use_libgtest==1', {
+          'type': 'none',
+          'variables': {
+            'gtest_defines': [
+              'GTEST_LANG_CXX11=1',
+              'GTEST_HAS_TR1_TUPLE=0',  # disable tr1 tuple in favor of C++11 tuple.
+            ],
+          },
+          'all_dependent_settings': {
+            'defines': [
+              '<@(gtest_defines)',
+            ],
+            'link_settings': {
+              'libraries': [
+                '-lgmock -lgtest',
+              ],
+            },
+          },
+        }, {
+          'type': 'static_library',
+          'variables': {
+            'gtest_defines': [
+              'GTEST_LANG_CXX11=1',
+              'GTEST_HAS_TR1_TUPLE=0',  # disable tr1 tuple in favor of C++11 tuple.
+            ],
+            'gtest_dir': '<(third_party_dir)/gtest/googletest',
+            'gmock_dir': '<(third_party_dir)/gtest/googlemock',
+          },
+          'sources': [
+            '<(gmock_dir)/src/gmock-cardinalities.cc',
+            '<(gmock_dir)/src/gmock-internal-utils.cc',
+            '<(gmock_dir)/src/gmock-matchers.cc',
+            '<(gmock_dir)/src/gmock-spec-builders.cc',
+            '<(gmock_dir)/src/gmock.cc',
+            '<(gtest_dir)/src/gtest-death-test.cc',
+            '<(gtest_dir)/src/gtest-filepath.cc',
+            '<(gtest_dir)/src/gtest-port.cc',
+            '<(gtest_dir)/src/gtest-printers.cc',
+            '<(gtest_dir)/src/gtest-test-part.cc',
+            '<(gtest_dir)/src/gtest-typed-test.cc',
+            '<(gtest_dir)/src/gtest.cc',
+          ],
+          'include_dirs': [
+            '<(gmock_dir)',
+            '<(gmock_dir)/include',
+            '<(gtest_dir)',
+            '<(gtest_dir)/include',
+          ],
+          'defines': [
+            '<@(gtest_defines)',
+          ],
+          'all_dependent_settings': {
+            'defines': [
+              '<@(gtest_defines)',
+            ],
+            'include_dirs': [
+              '<(gmock_dir)/include',
+              '<(gtest_dir)/include',
+            ],
+          }
+        }],
       ],
     },
     {

--- /src/base/absl.gyp
+++ /src/base/absl.gyp
@@ -35,214 +35,363 @@
   'targets': [
     {
       'target_name': 'absl_base',
-      'type': 'static_library',
-      'toolsets': ['host', 'target'],
-      'sources': [
-        '<(absl_srcdir)/base/internal/cycleclock.cc',
-        '<(absl_srcdir)/base/internal/low_level_alloc.cc',
-        '<(absl_srcdir)/base/internal/raw_logging.cc',
-        '<(absl_srcdir)/base/internal/spinlock.cc',
-        '<(absl_srcdir)/base/internal/spinlock_wait.cc',
-        '<(absl_srcdir)/base/internal/sysinfo.cc',
-        '<(absl_srcdir)/base/internal/thread_identity.cc',
-        '<(absl_srcdir)/base/internal/throw_delegate.cc',
-        '<(absl_srcdir)/base/internal/unscaledcycleclock.cc',
-        '<(absl_srcdir)/base/log_severity.cc',
-      ],
-      'dependencies': [
-        'absl_hash_internal',
-      ],
+      'toolsets': ['host', 'target'],
       'msvs_disabled_warnings': [
         # 'type' : forcing value to bool 'true' or 'false'
         # (performance warning)
         # http://msdn.microsoft.com/en-us/library/b6801kcy.aspx
         '4800',
       ],
+      'dependencies': [
+        'absl_hash_internal',
+      ],
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_base',
+                 '-labsl_city',
+                 '-labsl_hash',
+                 '-labsl_log_severity',
+               ],
+             },
+          },
+        }, {
+          'type': 'static_library',
+          'sources': [
+            '<(absl_srcdir)/base/internal/cycleclock.cc',
+            '<(absl_srcdir)/base/internal/low_level_alloc.cc',
+            '<(absl_srcdir)/base/internal/raw_logging.cc',
+            '<(absl_srcdir)/base/internal/spinlock.cc',
+            '<(absl_srcdir)/base/internal/spinlock_wait.cc',
+            '<(absl_srcdir)/base/internal/sysinfo.cc',
+            '<(absl_srcdir)/base/internal/thread_identity.cc',
+            '<(absl_srcdir)/base/internal/throw_delegate.cc',
+            '<(absl_srcdir)/base/internal/unscaledcycleclock.cc',
+            '<(absl_srcdir)/base/log_severity.cc',
+          ],
+        }]
+      ]
     },
     {
       'target_name': 'absl_debugging',
       'type': 'static_library',
       'toolsets': ['host', 'target'],
-      'sources': [
-        '<(absl_srcdir)/debugging/stacktrace.cc',
-        '<(absl_srcdir)/debugging/symbolize.cc',
-        '<(absl_srcdir)/debugging/internal/address_is_readable.cc',
-        '<(absl_srcdir)/debugging/internal/demangle.cc',
-        '<(absl_srcdir)/debugging/internal/elf_mem_image.cc',
-        '<(absl_srcdir)/debugging/internal/vdso_support.cc',
-      ],
-      'dependencies': [
-        'absl_base',
-      ],
+      'dependencies': [
+        'absl_base',
+      ],
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_debugging_internal',
+                 '-labsl_stacktrace',
+                 '-labsl_symbolize',
+               ],
+             },
+          },
+        }, {
+          'sources': [
+            '<(absl_srcdir)/debugging/stacktrace.cc',
+            '<(absl_srcdir)/debugging/symbolize.cc',
+            '<(absl_srcdir)/debugging/internal/address_is_readable.cc',
+            '<(absl_srcdir)/debugging/internal/demangle.cc',
+            '<(absl_srcdir)/debugging/internal/elf_mem_image.cc',
+            '<(absl_srcdir)/debugging/internal/vdso_support.cc',
+          ],
+        }]
+      ]
     },
     {
       'target_name': 'absl_flags',
       'type': 'static_library',
       'toolsets': ['host', 'target'],
-      'sources': [
-        '<(absl_srcdir)/flags/commandlineflag.cc',
-        '<(absl_srcdir)/flags/commandlineflag.h',
-        '<(absl_srcdir)/flags/usage.cc',
-        '<(absl_srcdir)/flags/usage.h',
-        '<(absl_srcdir)/flags/flag.cc',
-        '<(absl_srcdir)/flags/flag.h',
-        '<(absl_srcdir)/flags/config.h',
-        '<(absl_srcdir)/flags/declare.h',
-        '<(absl_srcdir)/flags/marshalling.cc',
-        '<(absl_srcdir)/flags/marshalling.h',
-        '<(absl_srcdir)/flags/parse.cc',
-        '<(absl_srcdir)/flags/parse.h',
-        '<(absl_srcdir)/flags/reflection.cc',
-        '<(absl_srcdir)/flags/reflection.h',
-        '<(absl_srcdir)/flags/usage_config.cc',
-        '<(absl_srcdir)/flags/usage_config.h',
-      ],
       'dependencies': [
         'absl_flags_internal',
         'absl_hash_internal',
         'absl_synchronization',
       ],
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_flags',
+                 '-labsl_flags_commandlineflag',
+                 '-labsl_flags_config',
+                 '-labsl_flags_marshalling',
+                 '-labsl_flags_parse',
+                 '-labsl_flags_reflection',
+               ],
+             },
+          },
+        }, {
+          'sources': [
+            '<(absl_srcdir)/flags/commandlineflag.cc',
+            '<(absl_srcdir)/flags/commandlineflag.h',
+            '<(absl_srcdir)/flags/usage.cc',
+            '<(absl_srcdir)/flags/usage.h',
+            '<(absl_srcdir)/flags/flag.cc',
+            '<(absl_srcdir)/flags/flag.h',
+            '<(absl_srcdir)/flags/config.h',
+            '<(absl_srcdir)/flags/declare.h',
+            '<(absl_srcdir)/flags/marshalling.cc',
+            '<(absl_srcdir)/flags/marshalling.h',
+            '<(absl_srcdir)/flags/parse.cc',
+            '<(absl_srcdir)/flags/parse.h',
+            '<(absl_srcdir)/flags/reflection.cc',
+            '<(absl_srcdir)/flags/reflection.h',
+            '<(absl_srcdir)/flags/usage_config.cc',
+            '<(absl_srcdir)/flags/usage_config.h',
+          ],
+        }]
+      ]
     },
     {
       'target_name': 'absl_flags_internal',
       'type': 'static_library',
       'toolsets': ['host', 'target'],
-      'sources': [
-        '<(absl_srcdir)/flags/internal/commandlineflag.cc',
-        '<(absl_srcdir)/flags/internal/commandlineflag.h',
-        '<(absl_srcdir)/flags/internal/flag.cc',
-        '<(absl_srcdir)/flags/internal/flag.h',
-        '<(absl_srcdir)/flags/internal/parse.h',
-        '<(absl_srcdir)/flags/internal/path_util.h',
-        '<(absl_srcdir)/flags/internal/private_handle_accessor.cc',
-        '<(absl_srcdir)/flags/internal/private_handle_accessor.h',
-        '<(absl_srcdir)/flags/internal/program_name.cc',
-        '<(absl_srcdir)/flags/internal/program_name.h',
-        '<(absl_srcdir)/flags/internal/registry.h',
-        '<(absl_srcdir)/flags/internal/usage.cc',
-        '<(absl_srcdir)/flags/internal/usage.h',
-      ],
       'dependencies': [
         'absl_strings',
       ],
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_flags_commandlineflag_internal',
+                 '-labsl_flags_internal',
+                 '-labsl_flags_private_handle_accessor',
+                 '-labsl_flags_program_name',
+                 '-labsl_flags_usage_internal',
+               ],
+             },
+          },
+        }, {
+          'sources': [
+            '<(absl_srcdir)/flags/internal/commandlineflag.cc',
+            '<(absl_srcdir)/flags/internal/commandlineflag.h',
+            '<(absl_srcdir)/flags/internal/flag.cc',
+            '<(absl_srcdir)/flags/internal/flag.h',
+            '<(absl_srcdir)/flags/internal/parse.h',
+            '<(absl_srcdir)/flags/internal/path_util.h',
+            '<(absl_srcdir)/flags/internal/private_handle_accessor.cc',
+            '<(absl_srcdir)/flags/internal/private_handle_accessor.h',
+            '<(absl_srcdir)/flags/internal/program_name.cc',
+            '<(absl_srcdir)/flags/internal/program_name.h',
+            '<(absl_srcdir)/flags/internal/registry.h',
+            '<(absl_srcdir)/flags/internal/usage.cc',
+            '<(absl_srcdir)/flags/internal/usage.h',
+          ],
+        }]
+      ],
     },
     {
       'target_name': 'absl_hash_internal',
       'toolsets': ['host', 'target'],
       'type': 'static_library',
-      'sources': [
-        '<(absl_srcdir)/container/internal/raw_hash_set.cc',
-        '<(absl_srcdir)/hash/internal/city.cc',
-        '<(absl_srcdir)/hash/internal/hash.cc',
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_raw_hash_set',
+                 '-labsl_hash',
+                 '-labsl_city',
+               ],
+             },
+          },
+        }, {
+          'sources': [
+            '<(absl_srcdir)/container/internal/raw_hash_set.cc',
+            '<(absl_srcdir)/hash/internal/city.cc',
+            '<(absl_srcdir)/hash/internal/hash.cc',
+          ],
+        }]
       ],
     },
     {
       'target_name': 'absl_numeric',
-      'type': 'static_library',
-      'toolsets': ['host', 'target'],
-      'sources': [
-        '<(absl_srcdir)/numeric/int128.cc',
-      ],
-      'dependencies': [
-        'absl_base',
-      ],
+      'dependencies': [
+        'absl_base',
+      ],
+      'toolsets': ['host', 'target'],
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_int128',
+               ],
+             },
+          },
+        }, {
+          'type': 'static_library',
+          'sources': [
+            '<(absl_srcdir)/numeric/int128.cc',
+          ],
+        }],
+      ]
     },
     {
       'target_name': 'absl_strings_internal',
-      'type': 'static_library',
-      'toolsets': ['host', 'target'],
-      'sources': [
-        '<(absl_srcdir)/strings/internal/charconv_bigint.cc',
-        '<(absl_srcdir)/strings/internal/charconv_parse.cc',
-        '<(absl_srcdir)/strings/internal/escaping.cc',
-        '<(absl_srcdir)/strings/internal/memutil.cc',
-        '<(absl_srcdir)/strings/internal/str_format/arg.cc',
-        '<(absl_srcdir)/strings/internal/str_format/bind.cc',
-        '<(absl_srcdir)/strings/internal/str_format/extension.cc',
-        '<(absl_srcdir)/strings/internal/str_format/float_conversion.cc',
-        '<(absl_srcdir)/strings/internal/str_format/output.cc',
-        '<(absl_srcdir)/strings/internal/str_format/parser.cc',
-        '<(absl_srcdir)/strings/internal/utf8.cc',
-      ],
+      'toolsets': ['host', 'target'],
       'dependencies': [
         'absl_base',
         'absl_numeric',
       ],
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_strings_internal',
+		 '-labsl_str_format_internal',
+               ],
+             },
+          },
+        }, {
+          'type': 'static_library',
+          'sources': [
+            '<(absl_srcdir)/strings/internal/charconv_bigint.cc',
+            '<(absl_srcdir)/strings/internal/charconv_parse.cc',
+            '<(absl_srcdir)/strings/internal/escaping.cc',
+            '<(absl_srcdir)/strings/internal/memutil.cc',
+            '<(absl_srcdir)/strings/internal/str_format/arg.cc',
+            '<(absl_srcdir)/strings/internal/str_format/bind.cc',
+            '<(absl_srcdir)/strings/internal/str_format/extension.cc',
+            '<(absl_srcdir)/strings/internal/str_format/float_conversion.cc',
+            '<(absl_srcdir)/strings/internal/str_format/output.cc',
+            '<(absl_srcdir)/strings/internal/str_format/parser.cc',
+            '<(absl_srcdir)/strings/internal/utf8.cc',
+          ],
+        }],
+      ],
     },
     {
       'target_name': 'absl_strings',
-      'type': 'static_library',
-      'toolsets': ['host', 'target'],
-      'sources': [
-        '<(absl_srcdir)/strings/ascii.cc',
-        '<(absl_srcdir)/strings/charconv.cc',
-        '<(absl_srcdir)/strings/escaping.cc',
-        '<(absl_srcdir)/strings/match.cc',
-        '<(absl_srcdir)/strings/numbers.cc',
-        '<(absl_srcdir)/strings/str_cat.cc',
-        '<(absl_srcdir)/strings/str_replace.cc',
-        '<(absl_srcdir)/strings/str_split.cc',
-        '<(absl_srcdir)/strings/string_view.cc',
-        '<(absl_srcdir)/strings/substitute.cc',
-      ],
+      'toolsets': ['host', 'target'],
       'dependencies': [
         'absl_base',
         'absl_numeric',
         'absl_strings_internal',
       ],
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_strings',
+               ],
+             },
+          },
+        }, {
+          'type': 'static_library',
+          'sources': [
+            '<(absl_srcdir)/strings/ascii.cc',
+            '<(absl_srcdir)/strings/charconv.cc',
+            '<(absl_srcdir)/strings/escaping.cc',
+            '<(absl_srcdir)/strings/match.cc',
+            '<(absl_srcdir)/strings/numbers.cc',
+            '<(absl_srcdir)/strings/str_cat.cc',
+            '<(absl_srcdir)/strings/str_replace.cc',
+            '<(absl_srcdir)/strings/str_split.cc',
+            '<(absl_srcdir)/strings/string_view.cc',
+            '<(absl_srcdir)/strings/substitute.cc',
+          ],
+        }],
+      ],
     },
     {
       'target_name': 'absl_synchronization',
       'type': 'static_library',
       'toolsets': ['host', 'target'],
-      'sources': [
-        '<(absl_srcdir)/synchronization/barrier.cc',
-        '<(absl_srcdir)/synchronization/blocking_counter.cc',
-        '<(absl_srcdir)/synchronization/blocking_counter.cc',
-        '<(absl_srcdir)/synchronization/internal/create_thread_identity.cc',
-        '<(absl_srcdir)/synchronization/internal/create_thread_identity.cc',
-        '<(absl_srcdir)/synchronization/internal/graphcycles.cc',
-        '<(absl_srcdir)/synchronization/internal/graphcycles.cc',
-        '<(absl_srcdir)/synchronization/internal/per_thread_sem.cc',
-        '<(absl_srcdir)/synchronization/internal/waiter.cc',
-        '<(absl_srcdir)/synchronization/mutex.cc',
-      ],
       'dependencies': [
         'absl_base',
         'absl_debugging',
         'absl_time',
         'absl_numeric'
       ],
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_synchronization',
+               ],
+             },
+          },
+        }, {
+          'type': 'static_library',
+          'sources': [
+            '<(absl_srcdir)/synchronization/barrier.cc',
+            '<(absl_srcdir)/synchronization/blocking_counter.cc',
+            '<(absl_srcdir)/synchronization/blocking_counter.cc',
+            '<(absl_srcdir)/synchronization/internal/create_thread_identity.cc',
+            '<(absl_srcdir)/synchronization/internal/create_thread_identity.cc',
+            '<(absl_srcdir)/synchronization/internal/graphcycles.cc',
+            '<(absl_srcdir)/synchronization/internal/graphcycles.cc',
+            '<(absl_srcdir)/synchronization/internal/per_thread_sem.cc',
+            '<(absl_srcdir)/synchronization/internal/waiter.cc',
+            '<(absl_srcdir)/synchronization/mutex.cc',
+          ],
+        }],
+      ],
     },
     {
       'target_name': 'absl_time',
-      'type': 'static_library',
-      'toolsets': ['host', 'target'],
-      'sources': [
-        '<(absl_srcdir)/time/civil_time.cc',
-        '<(absl_srcdir)/time/clock.cc',
-        '<(absl_srcdir)/time/duration.cc',
-        '<(absl_srcdir)/time/format.cc',
-        '<(absl_srcdir)/time/time.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/civil_time_detail.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/time_zone_fixed.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/time_zone_format.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/time_zone_if.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/time_zone_impl.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/time_zone_info.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/time_zone_libc.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/time_zone_lookup.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/time_zone_posix.cc',
-        '<(absl_srcdir)/time/internal/cctz/src/zone_info_source.cc',
-      ],
-      'cflags': [
-        '-Wno-error',
-      ],
+      'toolsets': ['host', 'target'],
       'dependencies': [
         'absl_base',
         'absl_numeric',
         'absl_strings_internal',
       ],
+      'conditions': [
+        ['use_libabseilcpp==1', {
+          'type': 'none',
+          'all_dependent_settings': {
+             'link_settings': {
+               'libraries': [
+                 '-labsl_time',
+                 '-labsl_time_zone',
+               ],
+             },
+          },
+        }, {
+          'type': 'static_library',
+          'sources': [
+            '<(absl_srcdir)/time/civil_time.cc',
+            '<(absl_srcdir)/time/clock.cc',
+            '<(absl_srcdir)/time/duration.cc',
+            '<(absl_srcdir)/time/format.cc',
+            '<(absl_srcdir)/time/time.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/civil_time_detail.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/time_zone_fixed.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/time_zone_format.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/time_zone_if.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/time_zone_impl.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/time_zone_info.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/time_zone_libc.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/time_zone_lookup.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/time_zone_posix.cc',
+            '<(absl_srcdir)/time/internal/cctz/src/zone_info_source.cc',
+          ],
+          'cflags': [
+            '-Wno-error',
+          ],
+        }],
+      ],
     },
   ],
 }
